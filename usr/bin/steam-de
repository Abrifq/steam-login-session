#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  steam-de
#
#  Copyright 2020 Thomas Castleman <contact@draugeros.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
"""Launch Steam BPM as the DE"""
from __future__ import print_function
import sys
import subprocess
import os
import time
from sys import argv as ARGV
import psutil


def __eprint__(*args, **kwargs):
    """Make it easier for us to print to stderr"""
    print(*args, file=sys.stderr, **kwargs)

if sys.version_info[0] == 2:
    __eprint__("Please run with Python 3 as Python 2 is End-of-Life.")
    sys.exit(2)

# get length of argv
ARGC = len(ARGV)
SIGTERM = 15
# Documentation stuffs
VERSION = "14.0.0"
HELP = """steam-login-session, Version %s
-h, --help\t\tPrint this help dialog and exit.
-v, --version\t\tPrint version and exit.

Pass nothing to start Steam DE.""" %  (VERSION)
# Commands we need to run
_COMMANDS = {
    # Xfwm cause it's already installed
    "launch_wm": ["/usr/bin/xfwm4", "--replace", "--compositor=off"],
    # Configure X11 if using Nvidia
    "config_nvidia": ["/usr/bin/nvidia-settings", "-l"],
    # DPMS: Display Power Managment signaling
    "dpms_off": ["/usr/bin/xset", "-dpms"],
    "screen_blank_off": ["/usr/bin/xset", "s", "off"],
    "start_steam": ["steam", "-bigpicture"],
    "kill_steam": ["steam", "-shutdown"]}


# Define all the functions we will need
def is_steam_running():
    """Check if Steam is running

    Return value will be in format:

    (bool, list)

    Where bool is a boolean indicating whether Steam is running or not
    and list is a list of pids for steam. If Steam is not running, this list
    will contain only -1.
    """
    process_name = "steam"
    pids = []
    # Iterate over the all the running process
    for proc in psutil.process_iter():
        try:
            # Check if process name contains the given name string.
            if process_name in proc.name().lower():
                pids.append(proc.pid)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    if len(pids) == 0:
        return (False, [-1])
    return (True, pids)


if __name__ == "__main__":
    if ARGC > 1:
        if ARGV[1] in ("-h", "--help"):
            print(HELP)
            sys.exit(0)
        elif ARGV[1] in ("-v", "--version"):
            print(VERSION)
            sys.exit(0)
        else:
            __eprint__("ERROR: %s : Not an understood flag")
            print(HELP)
            sys.exit(2)
    else:
        _steam_log_stdout = open("/tmp/steam_de-steam.log", "w+")
        _steam_log_stderr = open("/tmp/steam_de-steam_err.log", "w+")
        _wm_log_stdout = open("/tmp/steam_de-wm.log", "w+")
        _wm_log_stderr = open("/tmp/steam_de-wm_err.log", "w+")
        _etc_log = open("/tmp/steam_de-etc.log", "w+")
        OUTPUT = is_steam_running()
        if OUTPUT[0]:
            for each in OUTPUT[1]:
                os.kill(each, SIGTERM)
        pid = subprocess.Popen(_COMMANDS["launch_wm"],
                               stdout=_wm_log_stdout,
                               stderr=_wm_log_stderr).pid
        # Send Nvidia settings to X11 if using Nvidia
        if os.path.isfile(_COMMANDS["config_nvidia"][0]):
            subprocess.check_call(_COMMANDS["config_nvidia"])
        # Give it a sec to get going
        time.sleep(0.1)
        subprocess.check_call(_COMMANDS["dpms_off"],
                              stdout=_etc_log,
                              stderr=_etc_log)
        subprocess.check_call(_COMMANDS["screen_blank_off"],
                              stdout=_etc_log,
                              stderr=_etc_log)
        # Close this log since it won't be written to anymore
        _etc_log.flush()
        _etc_log.close()
        # Make sure everything is getting going.
        time.sleep(0.25)
        subprocess.check_call(_COMMANDS["start_steam"],
                              stdout=_steam_log_stdout,
                              stderr=_steam_log_stderr)
        # Wait for a few seconds to Steam to get going before we start monitoring it
        time.sleep(10)
        while True:
            OUTPUT = is_steam_running()
            if OUTPUT[0] is False:
                os.kill(pid, 15)
                break
            time.sleep(3)
        # Flush buffers then close files
        _steam_log_stdout.flush()
        _steam_log_stderr.flush()
        _wm_log_stdout.flush()
        _wm_log_stderr.flush()
        _steam_log_stdout.close()
        _steam_log_stderr.close()
        _wm_log_stdout.close()
        _wm_log_stderr.close()
